---
description: Refer when writing test.
globs: 
alwaysApply: false
---

# テスト作成時の共通指示

## テストファイル配置規則

### テスト種別による配置

- **Node.jsで動作するテスト**: `tests/logics/*.test.ts`
  - ドメインサービスのテストに使用
  - ビジネスロジック、ユーティリティ関数のテスト
- **Storybook interaction tests**: `tests/stories/*.stories.tsx`
  - UIコンポーネントのテストに使用
  - ユーザーインタラクション、レンダリングのテスト

### テストユーティリティ

- **ロジックテスト用**: `tests/logics/utils/`
- **Storybookテスト用**: `tests/stories/utils/`

## テストケース命名規則

### 基本原則

- テストケースは短文で命名する
- テストの意図が明確に伝わる命名を心がける

### 命名例

- 「Windowコンポーネントをクリックすると最前面に移動する」 → `WindowMovesToFrontWhenClicked`
- 「ユーザーが無効なメールアドレスを入力した場合、エラーメッセージが表示される」 → `ShowsErrorMessageForInvalidEmail`
- 「空の配列が渡された場合、空の結果を返す」 → `FunctionAReturnsEmptyResultForEmptyArray`

## テスト構造（AAAパターン）

### 基本構造

```typescript
// {テスト内容を日本語で記載する}
// Arrange
// テストに必要なデータ、モック、セットアップを準備

// Action
// テスト対象の処理を実行

// Assert
// 期待される結果を検証
```

### 複数事項のテスト

複数の事項を続けてテストする際は、AAAパターンを繰り返す：

```typescript
// 複数の動作をテストする場合
// Arrange
// 1つ目のテスト用データ準備

// Action
// 1つ目の処理実行

// Assert
// 1つ目の結果検証

// Arrange
// 2つ目のテスト用データ準備

// Action
// 2つ目の処理実行

// Assert
// 2つ目の結果検証
```

## テスト設計原則

### 基本方針

書籍「単体テストの考え方/使い方」の事項を意識する。テスト自体も負債であることを認識し、重要な要素・動的な対象に絞った維持する意義のあるテストを作成する。

### テスト対象の選定基準

- **ビジネス価値の高い機能**を優先的にテスト
- **複雑なロジック**や**エッジケース**を重点的にテスト
- **ユーザー体験に直結する機能**を確実にテスト

### テスト品質の確認項目

- [ ] テストケース名は意図を明確に表現しているか？
- [ ] AAAパターンに従って構造化されているか？
- [ ] テストデータは適切に準備されているか？
- [ ] アサーションは具体的で検証可能か？
- [ ] テストは独立して実行可能か？
- [ ] 重複するセットアップは共通化されているか？
- [ ] モックは適切に使用されているか？
